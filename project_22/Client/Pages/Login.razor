@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService

<h3 class="mb-5 text-center">Logga in</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="form-group col-md-6 mb-3">
            <label for="email">Epost</label>
            <InputText @bind-Value="user.Email" type="email"  class="form-control" id="email"/>
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="form-group col-md-6 mb-3">
            <label for="password">Lösenord</label>
            <InputText type="password" @bind-Value="user.Password" class="form-control" id="password"/>
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>
    <div class="text-danger mb-2">
        <span>@errorMsg</span>
    </div>
            
    <button type="submit" class="btn btn-primary text-center mb-5">Logga In</button>
</EditForm>



@code {
    private UserLoginForm user = new UserLoginForm();
    string errorMsg = string.Empty;

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMsg = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo("");
        }
        else
            errorMsg = result.Message;;
    }
}
